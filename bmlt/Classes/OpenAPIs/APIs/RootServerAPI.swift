//
// RootServerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RootServerAPI {

    /**
     Revokes a token
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authLogout(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authLogoutWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revokes a token
     - POST /api/v1/auth/logout
     - Revoke token and logout.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<Void> 
     */
    open class func authLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/auth/logout"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revokes and issues a new token
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authRefresh(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Token?, _ error: Error?) -> Void)) -> RequestTask {
        return authRefreshWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revokes and issues a new token
     - POST /api/v1/auth/refresh
     - Refresh token.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<Token> 
     */
    open class func authRefreshWithRequestBuilder() -> RequestBuilder<Token> {
        let localVariablePath = "/api/v1/auth/refresh"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a token
     
     - parameter tokenCredentials: (body) User credentials 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authToken(tokenCredentials: TokenCredentials, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Token?, _ error: Error?) -> Void)) -> RequestTask {
        return authTokenWithRequestBuilder(tokenCredentials: tokenCredentials).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a token
     - POST /api/v1/auth/token
     - Exchange credentials for a new token
     - parameter tokenCredentials: (body) User credentials 
     - returns: RequestBuilder<Token> 
     */
    open class func authTokenWithRequestBuilder(tokenCredentials: TokenCredentials) -> RequestBuilder<Token> {
        let localVariablePath = "/api/v1/auth/token"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenCredentials)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Token>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Tests some errors
     
     - parameter errorTest: (body) Pass in error test object. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createErrorTest(errorTest: ErrorTest, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: ErrorTest?, _ error: Error?) -> Void)) -> RequestTask {
        return createErrorTestWithRequestBuilder(errorTest: errorTest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Tests some errors
     - POST /api/v1/errortest
     - Tests some errors.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter errorTest: (body) Pass in error test object. 
     - returns: RequestBuilder<ErrorTest> 
     */
    open class func createErrorTestWithRequestBuilder(errorTest: ErrorTest) -> RequestBuilder<ErrorTest> {
        let localVariablePath = "/api/v1/errortest"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: errorTest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ErrorTest>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a format
     
     - parameter formatCreate: (body) Pass in format object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createFormat(formatCreate: FormatCreate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Format?, _ error: Error?) -> Void)) -> RequestTask {
        return createFormatWithRequestBuilder(formatCreate: formatCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a format
     - POST /api/v1/formats
     - Creates a format.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter formatCreate: (body) Pass in format object 
     - returns: RequestBuilder<Format> 
     */
    open class func createFormatWithRequestBuilder(formatCreate: FormatCreate) -> RequestBuilder<Format> {
        let localVariablePath = "/api/v1/formats"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: formatCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Format>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a meeting
     
     - parameter meetingCreate: (body) Pass in meeting object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createMeeting(meetingCreate: MeetingCreate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Meeting?, _ error: Error?) -> Void)) -> RequestTask {
        return createMeetingWithRequestBuilder(meetingCreate: meetingCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a meeting
     - POST /api/v1/meetings
     - Creates a meeting.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingCreate: (body) Pass in meeting object 
     - returns: RequestBuilder<Meeting> 
     */
    open class func createMeetingWithRequestBuilder(meetingCreate: MeetingCreate) -> RequestBuilder<Meeting> {
        let localVariablePath = "/api/v1/meetings"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meetingCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Meeting>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a service body
     
     - parameter serviceBodyCreate: (body) Pass in service body object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createServiceBody(serviceBodyCreate: ServiceBodyCreate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBody?, _ error: Error?) -> Void)) -> RequestTask {
        return createServiceBodyWithRequestBuilder(serviceBodyCreate: serviceBodyCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a service body
     - POST /api/v1/servicebodies
     - Creates a service body.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter serviceBodyCreate: (body) Pass in service body object 
     - returns: RequestBuilder<ServiceBody> 
     */
    open class func createServiceBodyWithRequestBuilder(serviceBodyCreate: ServiceBodyCreate) -> RequestBuilder<ServiceBody> {
        let localVariablePath = "/api/v1/servicebodies"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBodyCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBody>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a user
     
     - parameter userCreate: (body) Pass in user object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createUser(userCreate: UserCreate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) -> RequestTask {
        return createUserWithRequestBuilder(userCreate: userCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a user
     - POST /api/v1/users
     - Creates a user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter userCreate: (body) Pass in user object 
     - returns: RequestBuilder<User> 
     */
    open class func createUserWithRequestBuilder(userCreate: UserCreate) -> RequestBuilder<User> {
        let localVariablePath = "/api/v1/users"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a format
     
     - parameter formatId: (path) ID of format 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteFormat(formatId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteFormatWithRequestBuilder(formatId: formatId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a format
     - DELETE /api/v1/formats/{formatId}
     - Deletes a format by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter formatId: (path) ID of format 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFormatWithRequestBuilder(formatId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/formats/{formatId}"
        let formatIdPreEscape = "\(APIHelper.mapValueToPathItem(formatId))"
        let formatIdPostEscape = formatIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{formatId}", with: formatIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a meeting
     
     - parameter meetingId: (path) ID of meeting 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteMeeting(meetingId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteMeetingWithRequestBuilder(meetingId: meetingId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a meeting
     - DELETE /api/v1/meetings/{meetingId}
     - Deletes a meeting by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingId: (path) ID of meeting 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeetingWithRequestBuilder(meetingId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/meetings/{meetingId}"
        let meetingIdPreEscape = "\(APIHelper.mapValueToPathItem(meetingId))"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{meetingId}", with: meetingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a service body
     
     - parameter serviceBodyId: (path) ID of service body 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteServiceBody(serviceBodyId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteServiceBodyWithRequestBuilder(serviceBodyId: serviceBodyId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a service body
     - DELETE /api/v1/servicebodies/{serviceBodyId}
     - Deletes a service body by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter serviceBodyId: (path) ID of service body 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteServiceBodyWithRequestBuilder(serviceBodyId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/servicebodies/{serviceBodyId}"
        let serviceBodyIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceBodyId))"
        let serviceBodyIdPostEscape = serviceBodyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serviceBodyId}", with: serviceBodyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a user
     
     - parameter userId: (path) ID of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUser(userId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a user
     - DELETE /api/v1/users/{userId}
     - Deletes a user by id
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter userId: (path) ID of user 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserWithRequestBuilder(userId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a format
     
     - parameter formatId: (path) ID of format 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFormat(formatId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Format?, _ error: Error?) -> Void)) -> RequestTask {
        return getFormatWithRequestBuilder(formatId: formatId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a format
     - GET /api/v1/formats/{formatId}
     - Retrieve a format
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter formatId: (path) ID of format 
     - returns: RequestBuilder<Format> 
     */
    open class func getFormatWithRequestBuilder(formatId: Int64) -> RequestBuilder<Format> {
        var localVariablePath = "/api/v1/formats/{formatId}"
        let formatIdPreEscape = "\(APIHelper.mapValueToPathItem(formatId))"
        let formatIdPostEscape = formatIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{formatId}", with: formatIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Format>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves formats
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFormats(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [Format]?, _ error: Error?) -> Void)) -> RequestTask {
        return getFormatsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves formats
     - GET /api/v1/formats
     - Retrieve formats
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<[Format]> 
     */
    open class func getFormatsWithRequestBuilder() -> RequestBuilder<[Format]> {
        let localVariablePath = "/api/v1/formats"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Format]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves laravel log
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLaravelLog(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return getLaravelLogWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves laravel log
     - GET /api/v1/logs/laravel
     - Retrieve the laravel log if it exists.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<URL> 
     */
    open class func getLaravelLogWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/api/v1/logs/laravel"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a meeting
     
     - parameter meetingId: (path) ID of meeting 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMeeting(meetingId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Meeting?, _ error: Error?) -> Void)) -> RequestTask {
        return getMeetingWithRequestBuilder(meetingId: meetingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a meeting
     - GET /api/v1/meetings/{meetingId}
     - Retrieve a meeting.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingId: (path) ID of meeting 
     - returns: RequestBuilder<Meeting> 
     */
    open class func getMeetingWithRequestBuilder(meetingId: Int64) -> RequestBuilder<Meeting> {
        var localVariablePath = "/api/v1/meetings/{meetingId}"
        let meetingIdPreEscape = "\(APIHelper.mapValueToPathItem(meetingId))"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{meetingId}", with: meetingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Meeting>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve changes for a meeting
     
     - parameter meetingId: (path) ID of the meeting 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMeetingChanges(meetingId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [MeetingChangeResource]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMeetingChangesWithRequestBuilder(meetingId: meetingId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve changes for a meeting
     - GET /api/v1/meetings/{meetingId}/changes
     - Retrieve all changes made to a specific meeting.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingId: (path) ID of the meeting 
     - returns: RequestBuilder<[MeetingChangeResource]> 
     */
    open class func getMeetingChangesWithRequestBuilder(meetingId: Int64) -> RequestBuilder<[MeetingChangeResource]> {
        var localVariablePath = "/api/v1/meetings/{meetingId}/changes"
        let meetingIdPreEscape = "\(APIHelper.mapValueToPathItem(meetingId))"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{meetingId}", with: meetingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MeetingChangeResource]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves meetings
     
     - parameter meetingIds: (query) comma delimited meeting ids (optional)
     - parameter days: (query) comma delimited day ids between 0-6 (optional)
     - parameter serviceBodyIds: (query) comma delimited service body ids (optional)
     - parameter searchString: (query) string (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMeetings(meetingIds: String? = nil, days: String? = nil, serviceBodyIds: String? = nil, searchString: String? = nil, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [Meeting]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMeetingsWithRequestBuilder(meetingIds: meetingIds, days: days, serviceBodyIds: serviceBodyIds, searchString: searchString).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves meetings
     - GET /api/v1/meetings
     - Retrieve meetings for authenticated user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingIds: (query) comma delimited meeting ids (optional)
     - parameter days: (query) comma delimited day ids between 0-6 (optional)
     - parameter serviceBodyIds: (query) comma delimited service body ids (optional)
     - parameter searchString: (query) string (optional)
     - returns: RequestBuilder<[Meeting]> 
     */
    open class func getMeetingsWithRequestBuilder(meetingIds: String? = nil, days: String? = nil, serviceBodyIds: String? = nil, searchString: String? = nil) -> RequestBuilder<[Meeting]> {
        let localVariablePath = "/api/v1/meetings"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "meetingIds": (wrappedValue: meetingIds?.encodeToJSON(), isExplode: true),
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "serviceBodyIds": (wrappedValue: serviceBodyIds?.encodeToJSON(), isExplode: true),
            "searchString": (wrappedValue: searchString?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Meeting]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a root server
     
     - parameter rootServerId: (path) ID of root server 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRootServer(rootServerId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: RootServer?, _ error: Error?) -> Void)) -> RequestTask {
        return getRootServerWithRequestBuilder(rootServerId: rootServerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a root server
     - GET /api/v1/rootservers/{rootServerId}
     - Retrieve a single root server id.
     - parameter rootServerId: (path) ID of root server 
     - returns: RequestBuilder<RootServer> 
     */
    open class func getRootServerWithRequestBuilder(rootServerId: Int64) -> RequestBuilder<RootServer> {
        var localVariablePath = "/api/v1/rootservers/{rootServerId}"
        let rootServerIdPreEscape = "\(APIHelper.mapValueToPathItem(rootServerId))"
        let rootServerIdPostEscape = rootServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{rootServerId}", with: rootServerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootServer>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Retrieves root servers
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRootServers(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [RootServer]?, _ error: Error?) -> Void)) -> RequestTask {
        return getRootServersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves root servers
     - GET /api/v1/rootservers
     - Retrieve root servers.
     - returns: RequestBuilder<[RootServer]> 
     */
    open class func getRootServersWithRequestBuilder() -> RequestBuilder<[RootServer]> {
        let localVariablePath = "/api/v1/rootservers"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RootServer]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Retrieves service bodies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getServiceBodies(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [ServiceBody]?, _ error: Error?) -> Void)) -> RequestTask {
        return getServiceBodiesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves service bodies
     - GET /api/v1/servicebodies
     - Retrieve service bodies for authenticated user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<[ServiceBody]> 
     */
    open class func getServiceBodiesWithRequestBuilder() -> RequestBuilder<[ServiceBody]> {
        let localVariablePath = "/api/v1/servicebodies"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ServiceBody]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a service body
     
     - parameter serviceBodyId: (path) ID of service body 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getServiceBody(serviceBodyId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceBody?, _ error: Error?) -> Void)) -> RequestTask {
        return getServiceBodyWithRequestBuilder(serviceBodyId: serviceBodyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a service body
     - GET /api/v1/servicebodies/{serviceBodyId}
     - Retrieve a single service body by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter serviceBodyId: (path) ID of service body 
     - returns: RequestBuilder<ServiceBody> 
     */
    open class func getServiceBodyWithRequestBuilder(serviceBodyId: Int64) -> RequestBuilder<ServiceBody> {
        var localVariablePath = "/api/v1/servicebodies/{serviceBodyId}"
        let serviceBodyIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceBodyId))"
        let serviceBodyIdPostEscape = serviceBodyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serviceBodyId}", with: serviceBodyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceBody>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves a single user
     
     - parameter userId: (path) ID of user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUser(userId: Int64, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves a single user
     - GET /api/v1/users/{userId}
     - Retrieve single user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter userId: (path) ID of user 
     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userId: Int64) -> RequestBuilder<User> {
        var localVariablePath = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves users
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsers(apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: [User]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves users
     - GET /api/v1/users
     - Retrieve users for authenticated user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - returns: RequestBuilder<[User]> 
     */
    open class func getUsersWithRequestBuilder() -> RequestBuilder<[User]> {
        let localVariablePath = "/api/v1/users"
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[User]>.Type = bmltAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patches a user
     
     - parameter userId: (path) ID of user 
     - parameter userPartialUpdate: (body) Pass in fields you want to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func partialUpdateUser(userId: Int64, userPartialUpdate: UserPartialUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return partialUpdateUserWithRequestBuilder(userId: userId, userPartialUpdate: userPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patches a user
     - PATCH /api/v1/users/{userId}
     - Patches a user by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter userId: (path) ID of user 
     - parameter userPartialUpdate: (body) Pass in fields you want to update. 
     - returns: RequestBuilder<Void> 
     */
    open class func partialUpdateUserWithRequestBuilder(userId: Int64, userPartialUpdate: UserPartialUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patches a format
     
     - parameter formatId: (path) ID of format 
     - parameter formatPartialUpdate: (body) Pass in fields you want to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchFormat(formatId: Int64, formatPartialUpdate: FormatPartialUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchFormatWithRequestBuilder(formatId: formatId, formatPartialUpdate: formatPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patches a format
     - PATCH /api/v1/formats/{formatId}
     - Patches a single format by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter formatId: (path) ID of format 
     - parameter formatPartialUpdate: (body) Pass in fields you want to update. 
     - returns: RequestBuilder<Void> 
     */
    open class func patchFormatWithRequestBuilder(formatId: Int64, formatPartialUpdate: FormatPartialUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/formats/{formatId}"
        let formatIdPreEscape = "\(APIHelper.mapValueToPathItem(formatId))"
        let formatIdPostEscape = formatIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{formatId}", with: formatIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: formatPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patches a meeting
     
     - parameter meetingId: (path) ID of meeting 
     - parameter meetingPartialUpdate: (body) Pass in fields you want to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchMeeting(meetingId: Int64, meetingPartialUpdate: MeetingPartialUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchMeetingWithRequestBuilder(meetingId: meetingId, meetingPartialUpdate: meetingPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patches a meeting
     - PATCH /api/v1/meetings/{meetingId}
     - Patches a meeting by id
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingId: (path) ID of meeting 
     - parameter meetingPartialUpdate: (body) Pass in fields you want to update. 
     - returns: RequestBuilder<Void> 
     */
    open class func patchMeetingWithRequestBuilder(meetingId: Int64, meetingPartialUpdate: MeetingPartialUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/meetings/{meetingId}"
        let meetingIdPreEscape = "\(APIHelper.mapValueToPathItem(meetingId))"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{meetingId}", with: meetingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meetingPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patches a service body
     
     - parameter serviceBodyId: (path) ID of service body 
     - parameter serviceBodyPartialUpdate: (body) Pass in fields you want to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchServiceBody(serviceBodyId: Int64, serviceBodyPartialUpdate: ServiceBodyPartialUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchServiceBodyWithRequestBuilder(serviceBodyId: serviceBodyId, serviceBodyPartialUpdate: serviceBodyPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patches a service body
     - PATCH /api/v1/servicebodies/{serviceBodyId}
     - Patches a single service body by id.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter serviceBodyId: (path) ID of service body 
     - parameter serviceBodyPartialUpdate: (body) Pass in fields you want to update. 
     - returns: RequestBuilder<Void> 
     */
    open class func patchServiceBodyWithRequestBuilder(serviceBodyId: Int64, serviceBodyPartialUpdate: ServiceBodyPartialUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/servicebodies/{serviceBodyId}"
        let serviceBodyIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceBodyId))"
        let serviceBodyIdPostEscape = serviceBodyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serviceBodyId}", with: serviceBodyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBodyPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a format
     
     - parameter formatId: (path) ID of format 
     - parameter formatUpdate: (body) Pass in format object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateFormat(formatId: Int64, formatUpdate: FormatUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateFormatWithRequestBuilder(formatId: formatId, formatUpdate: formatUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a format
     - PUT /api/v1/formats/{formatId}
     - Updates a format.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter formatId: (path) ID of format 
     - parameter formatUpdate: (body) Pass in format object 
     - returns: RequestBuilder<Void> 
     */
    open class func updateFormatWithRequestBuilder(formatId: Int64, formatUpdate: FormatUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/formats/{formatId}"
        let formatIdPreEscape = "\(APIHelper.mapValueToPathItem(formatId))"
        let formatIdPostEscape = formatIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{formatId}", with: formatIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: formatUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a meeting
     
     - parameter meetingId: (path) ID of meeting 
     - parameter meetingUpdate: (body) Pass in meeting object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMeeting(meetingId: Int64, meetingUpdate: MeetingUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMeetingWithRequestBuilder(meetingId: meetingId, meetingUpdate: meetingUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a meeting
     - PUT /api/v1/meetings/{meetingId}
     - Updates a meeting.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter meetingId: (path) ID of meeting 
     - parameter meetingUpdate: (body) Pass in meeting object 
     - returns: RequestBuilder<Void> 
     */
    open class func updateMeetingWithRequestBuilder(meetingId: Int64, meetingUpdate: MeetingUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/meetings/{meetingId}"
        let meetingIdPreEscape = "\(APIHelper.mapValueToPathItem(meetingId))"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{meetingId}", with: meetingIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meetingUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a Service Body
     
     - parameter serviceBodyId: (path) ID of service body 
     - parameter serviceBodyUpdate: (body) Pass in service body object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateServiceBody(serviceBodyId: Int64, serviceBodyUpdate: ServiceBodyUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateServiceBodyWithRequestBuilder(serviceBodyId: serviceBodyId, serviceBodyUpdate: serviceBodyUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a Service Body
     - PUT /api/v1/servicebodies/{serviceBodyId}
     - Updates a single service body.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter serviceBodyId: (path) ID of service body 
     - parameter serviceBodyUpdate: (body) Pass in service body object 
     - returns: RequestBuilder<Void> 
     */
    open class func updateServiceBodyWithRequestBuilder(serviceBodyId: Int64, serviceBodyUpdate: ServiceBodyUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/servicebodies/{serviceBodyId}"
        let serviceBodyIdPreEscape = "\(APIHelper.mapValueToPathItem(serviceBodyId))"
        let serviceBodyIdPostEscape = serviceBodyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{serviceBodyId}", with: serviceBodyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceBodyUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update single user
     
     - parameter userId: (path) ID of user 
     - parameter userUpdate: (body) Pass in user object 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUser(userId: Int64, userUpdate: UserUpdate, apiResponseQueue: DispatchQueue = bmltAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserWithRequestBuilder(userId: userId, userUpdate: userUpdate).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update single user
     - PUT /api/v1/users/{userId}
     - Updates a user.
     - OAuth:
       - type: oauth2
       - name: bmltToken
     - parameter userId: (path) ID of user 
     - parameter userUpdate: (body) Pass in user object 
     - returns: RequestBuilder<Void> 
     */
    open class func updateUserWithRequestBuilder(userId: Int64, userUpdate: UserUpdate) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = bmltAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = bmltAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
